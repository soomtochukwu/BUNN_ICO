{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/BUNN_ICO.sol": {
      "content": "/**\n * @title BUNN_ICO - BUNN Token Initial Coin Offering (ICO) Contract\n * @dev This contract allows users to register and claim BUNN tokens during the ICO period.\n * The ICO is open for a specific duration, and registered addresses can claim tokens after the ICO ends.\n * Only the contract admin can withdraw Ether from the contract.\n */\n\n//  SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n// Import OpenZeppelin ERC20 interface for interacting with the BUNN token\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ncontract BUNN_ICO {\n    address public admin; // Address of the contract admin\n    address public ico_token; // Address of the BUNN token contract\n\n    // Mapping to track registered and claimed addresses\n    mapping(address => bool) public registered_addresses;\n    mapping(address => bool) public claimed_addresses;\n\n    uint256 public ico_start_time; // ICO start timestamp\n    uint256 public constant ICO_DURATION = 86400; // ICO duration in seconds (adjust as needed)\n\n    // Events to log registration and claiming status\n    event Claimed(address indexed _address, bool status);\n    event Registered(address indexed _address, bool status);\n\n    /**\n     * @dev Constructor function to initialize contract state\n     */\n    constructor(address _admin, address _ico_token, uint256 _ico_start_time) {\n        admin = _admin;\n        ico_token = address(_ico_token);\n        ico_start_time = _ico_start_time;\n\n        /* \n        admin = msg.sender;\n        ico_token = address(0x846C9D65404B5325163f2850DAcF7C3Dff9ef0B2);\n        ico_start_time = block.timestamp; */\n    }\n\n    /**\n     * @dev Modifier to restrict access to admin-only functions\n     */\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin can call this function\");\n        _;\n    }\n\n    /**\n     * @dev Function to allow users to register for the ICO by sending 0.01 ETH\n     * Users can only register once, and registration is allowed during the ICO period.\n     */\n    function register() external payable {\n        require(\n            msg.value == 0.01 ether,\n            \"Incorrect amount, please send 0.01 ETH\"\n        );\n        require(\n            !registered_addresses[msg.sender],\n            \"Address already registered\"\n        );\n\n        uint256 ico_end_time = ico_start_time + ICO_DURATION;\n\n        require(block.timestamp < ico_end_time, \"ICO has ended\");\n\n        registered_addresses[msg.sender] = true;\n\n        emit Registered(msg.sender, true);\n    }\n\n    /**\n     * @dev Function to allow registered users to claim BUNN tokens after the ICO has ended.\n     * Each user can claim 50 BUNN tokens, and claiming is only allowed once per address.\n     */\n    function claim() external returns (bool) {\n        uint256 ico_end_time = ico_start_time + ICO_DURATION;\n        require(block.timestamp > ico_end_time, \"ICO is still ongoing\");\n        require(registered_addresses[msg.sender], \"Address is not registered\");\n        require(\n            !claimed_addresses[msg.sender],\n            \"Address has already claimed tokens\"\n        );\n\n        IERC20 BUNN = IERC20(ico_token);\n\n        BUNN.transferFrom(admin, msg.sender, 50e18);\n\n        claimed_addresses[msg.sender] = true;\n\n        emit Claimed(msg.sender, true);\n\n        return true;\n    }\n\n    /**\n     * @dev Function to allow the admin to withdraw any remaining Ether in the contract\n     * Only the contract admin can call this function.\n     */\n    function withdrawEther() external onlyAdmin {\n        payable(admin).transfer(address(this).balance);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}